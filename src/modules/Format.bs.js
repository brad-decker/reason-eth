// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Bn = require("bs-bn.js/src/Bn.js");
var Utf8 = require("utf8");
var Block = require("bs-platform/lib/js/block.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var NumberToBn = require("number-to-bn");

var utf8padding = /^(?:\u0000)*/;

var hexpadding = /^(?:00)*/;

var isHexStrictRegex = /^(-)?0x[0-9a-f]*$/i;

var isHexRegex = /^(-0x|0x)?[0-9a-f]*$/i;

function isHex(s) {
  return isHexRegex.test(s);
}

function isHexStrict(s) {
  return isHexStrictRegex.test(s);
}

var ten = Bn.fromFloat(undefined, undefined, 10);

var eighteen = Bn.fromFloat(undefined, undefined, 18);

var oneEth = Bn.pow(eighteen, ten);

console.log(ten, eighteen);

function reverseString(s) {
  return Belt_Array.reverse(s.split("")).join("");
}

function removePadding(s, regex) {
  return reverseString(reverseString(s.replace(regex, "")).replace(regex, ""));
}

function plainText(str) {
  return /* `PlainText */[
          -675635273,
          str
        ];
}

function hexString(hex) {
  return /* `HexString */[
          681629164,
          hex
        ];
}

function extractCleanString(data) {
  if (data[0] >= 681629164) {
    return removePadding(data[1].replace("0x", ""), hexpadding);
  } else {
    return removePadding(Utf8.encode(data[1]), utf8padding);
  }
}

function prepareData(data) {
  if (data[0] >= 681629164) {
    return removePadding(data[1].replace("0x", ""), hexpadding);
  } else {
    return removePadding(Utf8.encode(data[1]), utf8padding);
  }
}

function hexCharToStr(hex) {
  return String.fromCharCode(parseInt(hex, 16));
}

function reverseHex(_currOpt, _hex) {
  while(true) {
    var currOpt = _currOpt;
    var hex = _hex;
    var curr = currOpt !== undefined ? currOpt : "";
    var currentChar = hex.substr(0, 2);
    var appended = curr + String.fromCharCode(parseInt(currentChar, 16));
    if (hex.length > 2) {
      _hex = hex.slice(2);
      _currOpt = appended;
      continue ;
    } else {
      return appended;
    }
  };
}

function encode(input) {
  return /* `HexString */[
          681629164,
          Belt_Array.reduce(prepareData(input).split(""), "0x", (function (result, character) {
                  var match = character.codePointAt(0);
                  var tmp;
                  if (match !== undefined) {
                    var vstr = match.toString(16);
                    tmp = vstr.length < 2 ? "0" + vstr : vstr;
                  } else {
                    tmp = "";
                  }
                  return result + tmp;
                }))
        ];
}

function decode(input) {
  return /* `PlainText */[
          -675635273,
          Utf8.decode(reverseHex(undefined, prepareData(input)))
        ];
}

function getString(t) {
  return t[1];
}

var Data = {
  plainText: plainText,
  hexString: hexString,
  extractCleanString: extractCleanString,
  prepareData: prepareData,
  hexCharToStr: hexCharToStr,
  reverseHex: reverseHex,
  encode: encode,
  decode: decode,
  getString: getString
};

function string(x) {
  return x;
}

function $$int(x) {
  return x;
}

function classify(param) {
  if (typeof param === "string") {
    return /* HexString */Block.__(0, [param]);
  } else {
    return /* BigNumber */Block.__(1, [NumberToBn(param)]);
  }
}

function caseToBn(param) {
  if (param.tag) {
    return param[0];
  } else {
    var s = param[0];
    if (isHexStrictRegex.test(s)) {
      return NumberToBn(s);
    } else {
      return Js_exn.raiseError("no");
    }
  }
}

function toBn(v) {
  return caseToBn(classify(v));
}

function toFloat(x) {
  return Bn.toNumber(caseToBn(x));
}

function toHex(x) {
  var bn = caseToBn(x);
  var s = Bn.toString(16, undefined)(bn);
  if (Bn.lt(bn, Bn.fromFloat(undefined, undefined, 0))) {
    return "-0x" + (function (param) {
                return s.substr(param);
              })(1);
  } else {
    return "0x" + s;
  }
}

function toNumberString(x) {
  return Bn.toString(10, undefined)(caseToBn(x));
}

var Quantity = {
  string: string,
  $$int: $$int,
  classify: classify,
  caseToBn: caseToBn,
  toBn: toBn,
  toFloat: toFloat,
  toHex: toHex,
  toNumberString: toNumberString
};

function toString(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Latest */0 :
          return "latest";
      case /* Earliest */1 :
          return "earliest";
      case /* Pending */2 :
          return "pending";
      
    }
  } else {
    var match = param[0];
    if (match[0] >= 681629164) {
      return match[1];
    } else {
      return encode(/* `PlainText */[
                    -675635273,
                    match[1]
                  ])[1];
    }
  }
}

var BlockIdentifier = {
  toString: toString
};

console.log(Bn.toString(10, undefined)(oneEth));

exports.utf8padding = utf8padding;
exports.hexpadding = hexpadding;
exports.isHexStrictRegex = isHexStrictRegex;
exports.isHexRegex = isHexRegex;
exports.isHex = isHex;
exports.isHexStrict = isHexStrict;
exports.ten = ten;
exports.eighteen = eighteen;
exports.oneEth = oneEth;
exports.reverseString = reverseString;
exports.removePadding = removePadding;
exports.Data = Data;
exports.Quantity = Quantity;
exports.BlockIdentifier = BlockIdentifier;
/* ten Not a pure module */
