// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");

function toString(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* ParseError */0 :
          return "Invalid JSON";
      case /* InvalidRequest */1 :
          return "JSON is not a valid request object";
      case /* MethodNotFound */2 :
          return "Method does not exist";
      case /* InvalidParams */3 :
          return "Invalid method parameters";
      case /* InternalError */4 :
          return "Internal JSON-RPC error";
      case /* InvalidInput */5 :
          return "Missing or invalid parameters";
      case /* ResourceNotFound */6 :
          return "Requested resource was not found";
      case /* ResourceUnavailable */7 :
          return "Requested resource not available";
      case /* TransactionRejected */8 :
          return "Transaction creation failed";
      case /* MethodNotSupported */9 :
          return "Method is not implemented";
      case /* LimitExceeded */10 :
          return "Request exceeds defined limit";
      case /* VersionNotSupported */11 :
          return "Version of JSON-RPC protocol is not supported";
      case /* NotConnectedToProvider */12 :
          return "Currently not connected to ethereum provider";
      
    }
  } else {
    var match = param[0];
    if (match !== undefined) {
      var match$1 = param[1];
      var code = match;
      if (match$1 !== undefined) {
        return "An error occurred with code " + (String(code) + (", stating: " + (String(match$1) + "")));
      } else {
        return "An error with code " + (String(code) + " occurred");
      }
    } else {
      var match$2 = param[1];
      if (match$2 !== undefined) {
        return match$2;
      } else {
        return "An unknown error occurred";
      }
    }
  }
}

function raiseJsExn(err) {
  return Js_exn.raiseError(toString(err));
}

function deriveJSONRPCError(jsonError) {
  var e = jsonError.error;
  var match = e.code;
  if (match < -32599) {
    if (match !== -32700) {
      if (match >= -32603) {
        switch (match + 32603 | 0) {
          case 0 :
              return /* InternalError */4;
          case 1 :
              return /* InvalidParams */3;
          case 2 :
              return /* MethodNotFound */2;
          case 3 :
              return /* InvalidRequest */1;
          
        }
      }
      
    } else {
      return /* ParseError */0;
    }
  } else {
    switch (match) {
      case -32006 :
          return /* VersionNotSupported */11;
      case -32005 :
          return /* LimitExceeded */10;
      case -32004 :
          return /* MethodNotSupported */9;
      case -32003 :
          return /* TransactionRejected */8;
      case -32002 :
          return /* ResourceUnavailable */7;
      case -32001 :
          return /* ResourceNotFound */6;
      case -32000 :
          return /* InvalidInput */5;
      default:
        
    }
  }
  return /* UnidentifiedError */[
          e.code,
          e.message
        ];
}

exports.toString = toString;
exports.raiseJsExn = raiseJsExn;
exports.deriveJSONRPCError = deriveJSONRPCError;
/* No side effect */
