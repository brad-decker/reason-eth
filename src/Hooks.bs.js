// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Eth = require("./Eth.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Methods = require("./Methods.bs.js");
var $$Promise = require("reason-promise/src/js/promise.js");

function usePromise(promise) {
  var match = React.useState((function () {
          return /* Pending */0;
        }));
  var setState = match[1];
  React.useEffect((function () {
          var subscribed = {
            contents: true
          };
          $$Promise.get(promise, (function (res) {
                  if (subscribed.contents === true) {
                    if (res.tag) {
                      var e = res[0];
                      return Curry._1(setState, (function (param) {
                                    return /* Rejected */Block.__(1, [e]);
                                  }));
                    } else {
                      var v = res[0];
                      return Curry._1(setState, (function (param) {
                                    return /* Resolved */Block.__(0, [v]);
                                  }));
                    }
                  } else {
                    return 0;
                  }
                }));
          return (function (param) {
                    subscribed.contents = false;
                    return /* () */0;
                  });
        }), [promise]);
  return match[0];
}

function useEthPromise(fn) {
  var eth = Eth.make(/* () */0);
  return usePromise(React.useMemo((function () {
                    var match = eth.status;
                    if (match) {
                      return Curry._1(fn, /* () */0);
                    } else {
                      return $$Promise.resolved(/* Error */Block.__(1, [/* NotConnectedToProvider */12]));
                    }
                  }), /* tuple */[
                  fn,
                  eth.status
                ]));
}

function useAccounts(param) {
  return useEthPromise(React.useCallback((function (param) {
                    return Methods.requestAccounts(/* () */0);
                  }), ([])));
}

function useBalance(account, blockIdentifier) {
  return useEthPromise(React.useCallback((function (param) {
                    return Methods.getBalance(account, blockIdentifier);
                  }), /* tuple */[
                  account,
                  blockIdentifier
                ]));
}

exports.usePromise = usePromise;
exports.useEthPromise = useEthPromise;
exports.useAccounts = useAccounts;
exports.useBalance = useBalance;
/* Eth Not a pure module */
